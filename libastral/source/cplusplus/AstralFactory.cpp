
/*** !!! Autogenerated from source/mtx/AstralFactory.mtx !!! ***/

#include "astral/Astral.h"
#include "astral/AstralExport.h"
#include "astral/AstralFactory.h"

#include <openxds.io/Directory.h>
#include <openxds.io/Path.h>
#include <openxds.adt.std/Sequence.h>
#include <openxds.adt/IList.h>
#include <openxds.adt/IPIterator.h>
#include <openxds.base/String.h>

using namespace astral;
using namespace openxds::adt;
using namespace openxds::adt::std;
using namespace openxds::base;
using namespace openxds::io;

static void      processPaths( Astral& astral, const IList<Path>& pathList, const char* extension );
static void recursivelySearch( Astral& astral, const Path& path,            const char* extension );

Astral*
AstralFactory::createAstral( const IList<Path>& pathList, const char* extension )
{
	Astral* astral = new Astral();
	{
		processPaths( *astral, pathList, extension );
	}
	return astral;
}

AstralExport*
AstralFactory::createAstralExport( const IList<Path>& pathList, const char* extension )
{
	AstralExport* astral = new AstralExport();
	{
		processPaths( *astral, pathList, extension );
	}
	return astral;
}

static void processPaths( Astral& astral, const IList<Path>& pathList, const char* extension )
{
	IPIterator<Path>* it = pathList.positions();
	while ( it->hasNext() )
	{
		IPosition<Path>* p = it->next();
		{
			const Path& path = p->getElement();
			recursivelySearch( astral, path, extension );
		}
		delete p;
	}
	delete it;
}

static void recursivelySearch( Astral& astral, const Path& path, const char* extension )
{
	Directory current( path.getAbsolute().getChars() );
	IList<String>* files = current.retrieveFileList();
	{
		IPIterator<String>* it = files->positions();
		while ( it->hasNext() )
		{
			IPosition<String>* p = it->next();
			{
				const String& filename = p->getElement();
				if ( ! filename.startsWith( "." ) )
				{
					Path* child = path.childPath( filename );
					if ( child->getExtension().contentEquals( extension ) )
					{
						astral.add( child->getAbsolute() );
					}
					else
					{
						Directory possible( child->getAbsolute().getChars() );
						if ( possible.exists() )
						{
							recursivelySearch( astral, *child, extension );
						}
					}
					delete child;
				}
			}
			delete p;
		}
		delete it;
	}
	delete files;
}
