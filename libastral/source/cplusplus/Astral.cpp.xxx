
#include "astral/Astral.h"
#include "astral/CompilationUnit.h"
#include "astral/MethodSignature.h"
#include "astral/SymbolDB.h"

#include <openxds.adt.std/Dictionary.h>
#include <openxds.adt/IEntry.h>
#include <openxds.base/String.h>

using namespace astral;
using namespace openxds::adt;
using namespace openxds::adt::std;
using namespace openxds::base;

Astral::Astral()
{
	this->files          = new Dictionary<CompilationUnit>();
	this->symbolDB       = new SymbolDB();
}

Astral::~Astral()
{
	delete this->files;
	delete this->symbolDB;
}

void
Astral::addBaseDirectory( const String& path )
{

}

void
Astral::addSourceFile( const String& path )
{
	CompilationUnit* cu = new CompilationUnit( path.getChars() );
	cu->initialise();

	IEntry<CompilationUnit>* entry = this->files->insert( path.getChars(), cu );
	{
		this->symbolDB->registerCU( *entry );
	}
	delete entry;
}

const CompilationUnit&
Astral::getCompilationUnit( const openxds::base::String& methodSignature ) const
{
	const char* method_signature = methodSignature.getChars();
	const IEntry<const IEntry<CompilationUnit> >* e = this->symbolDB->getSymbols().find( method_signature );
	const CompilationUnit& cu = e->getValue().getValue();
	delete e;
	
	return cu;
}

const CompilationUnit&
Astral::getCompilationUnit( const MethodSignature& aMethodSignature ) const
{
	return this->getCompilationUnit( aMethodSignature.getMethodCall() );
}


//	Protected methods

openxds::adt::IDictionary<const openxds::adt::IEntry<CompilationUnit> >&
Astral::getCompilationUnits()
{
	return this->symbolDB->getSymbols();
}

const openxds::adt::IDictionary<const openxds::adt::IEntry<CompilationUnit> >&
Astral::getCompilationUnits() const
{
	return this->symbolDB->getSymbols();
}
